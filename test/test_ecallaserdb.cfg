//
// Tests EcalLaserCorrectionService producer
//
// Toyoko Orimoto (Caltech), 10 July 2007


process TEST = {

//    	include "FWCore/MessageService/data/MessageLogger.cfi"
    	include "CondCore/DBCommon/data/CondDBCommon.cfi"

	include "Geometry/EcalMapping/data/EcalMapping.cfi"
     	include "Geometry/CaloEventSetup/data/CaloGeometry.cfi"
     	include "Geometry/CaloEventSetup/data/EcalTrigTowerConstituents.cfi"
     	include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
     	include "CalibCalorimetry/Configuration/data/Ecal_FakeConditions.cff"


	module print = AsciiOutputModule { }
	
	module EcalLaserDbAnalyzer = EcalLaserDbAnalyzer {}
	
	es_module = EcalLaserCorrectionService {}

        replace CondDBCommon.connect = "oracle://cms_orcoff_int2r/CMS_ECAL_OFF_TEST"
        replace CondDBCommon.catalog = "relationalcatalog_oracle://cms_orcoff_int2r/CMS_ECAL_OFF_TEST"
        replace CondDBCommon.DBParameters.authenticationPath="/afs/cern.ch/user/t/torimoto/scratch0/CMSSW/CMSSW_1_5_0/src/CondTools/Ecal/db_auth"    

	es_source es_pool = PoolDBESSource { 
	        using CondDBCommon
	        VPSet toGet = {
			 { 
				string record = "EcalLaserAPDPNRatiosRcd" 
				string tag = "EcalLaserAPDPNRatios_o2o" 
	 		},

   	            	{
       	                	string record = "EcalLaserAPDPNRatiosRefRcd"
               	        	string tag = "EcalLaserAPDPNRatiosRef_master"
	               	},

                	{
                      	  	string record = "EcalLaserAlphasRcd"
                        	string tag = "EcalLaserAlphas_master"
                	}
	
		}
        	untracked bool siteLocalConfig=false

	}				   

#	es_source es_hardcode = HcalHardcodeCalibrations {untracked vstring toGet = {"QIEData", "channelQuality", "electronicsMap"}}

  es_source eegeom = EmptyESSource {
     string recordName = "EcalMappingRcd"
     vuint32 firstValid = { 1 }
    bool iovIsRunNotTime = True
   }
 

    // Empty event source
    source = EmptyIOVSource {
	 string timetype = "runnumber"
#         uint64 firstValue = 11
#	 uint64 lastValue = 20
         uint64 firstValue = 30
	 uint64 lastValue = 30
         uint64 interval = 1
	}

#    	source = EmptySource {
#		string timetype = "runnumber"
#         	uint64 firstValue = 11
#	 	uint64 lastValue = 20
#         	uint64 interval = 1
#	}
#
        untracked PSet maxEvents = {untracked int32 input = 100}	

#	source = EmptySource {      #untracked int32 maxEvents = 20
#                                    uint64 firstValue = 1 
#                                    untracked uint32 numberEventsInRun = 2 
#                                   }

        module get = EventSetupRecordDataGetter { VPSet toGet = {
               {
		string record = "EcalLaserAPDPNRatiosRcd"
                vstring data = {"EcalLaserAPDPNRatios"} 
#		string record = "EcalLaserAPDPNRatiosRefRcd"
#                vstring data = {"EcalLaserAPDPNRatiosRef"} 
		}
               }
               untracked bool verbose = true
        }


	path p = { get & print & EcalLaserDbAnalyzer}



}
